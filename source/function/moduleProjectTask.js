"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.entryointCLI = exports.entrypointProgrammaticAPI = exports.transpileTarget = exports.transpilePackageDependency = exports.copyYarnLockfile = exports.removeDistributionFolder = exports.module_installYarn = void 0;var _path = _interopRequireDefault(require("path"));
var _fs = require("fs");

var _util = _interopRequireDefault(require("util"));
var _stream = _interopRequireDefault(require("stream"));


var _rimraf = _interopRequireDefault(require("rimraf"));



var _glob = _interopRequireDefault(require("glob"));


var _deploymentProvisioning = require("@dependency/deploymentProvisioning");








var _javascriptTranspilation = require("@dependency/javascriptTranspilation");const pipeline = _util.default.promisify(_stream.default.pipeline);const rimraf = _util.default.promisify(_rimraf.default);const wildcardPathnameMatcher = _util.default.promisify(_glob.default);
const packageDependencyPatternMatch = '**/@package*/**/*',
nodeModulePatternMatch = '**/node_modules/**/*';

const module_installYarn = ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  (0, _deploymentProvisioning.installPackageUsingYarn)({ yarnPath: _path.default.join(targetProjectConfig.directory.source) });
};exports.module_installYarn = module_installYarn;

const removeDistributionFolder = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));


  let fileStat = await _fs.promises.lstat(targetProjectConfig.directory.distribution).catch(error => error.code == 'ENOENT' ? false : console.error(error));
  if (fileStat && fileStat.isDirectory()) await rimraf(targetProjectConfig.directory.distribution, { disableGlob: false });

  await _fs.promises.mkdir(targetProjectConfig.directory.distribution, { recursive: true });
};exports.removeDistributionFolder = removeDistributionFolder;

const copyYarnLockfile = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let filePath = _path.default.join(targetProjectConfig.directory.root, 'yarn.lock');
  let fileStat = await _fs.promises.lstat(filePath).catch(error => error.code == 'ENOENT' ? false : console.error(error));
  if (fileStat && fileStat.isFile()) await _deploymentProvisioning.synchronizeFile.copyFileAndSymlink({ source: filePath, destination: targetProjectConfig.directory.distribution });
};exports.copyYarnLockfile = copyYarnLockfile;

const transpilePackageDependency = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let sourceRelativePath = './package.json';
  await (0, _javascriptTranspilation.transpileSourcePath)({ source: sourceRelativePath, destination: targetProjectConfig.directory.distribution, basePath: targetProjectConfig.directory.root });


};exports.transpilePackageDependency = transpilePackageDependency;

const transpileTarget = async ({ node, context }) => {var _node$properties;
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let sourceRelativePath = ((_node$properties = node.properties) === null || _node$properties === void 0 ? void 0 : _node$properties.relativePath) || function (e) {throw e;}(new Error(`• relativePath must exist on stage node that uses this condition for evaluation.`));
  return await (0, _javascriptTranspilation.transpileSourcePath)({ source: sourceRelativePath, destination: targetProjectConfig.directory.distribution, basePath: targetProjectConfig.directory.root });
};exports.transpileTarget = transpileTarget;

const entrypointProgrammaticAPI = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));

  let enrtypointKey = 'programmaticAPI';
  if (!(targetProjectConfig === null || targetProjectConfig === void 0 ? void 0 : targetProjectConfig.entrypoint) || !(targetProjectConfig === null || targetProjectConfig === void 0 ? void 0 : targetProjectConfig.entrypoint[enrtypointKey])) return;

  let scriptTargetFile = _path.default.join(targetProjectConfig.directory.source, targetProjectConfig.entrypoint[enrtypointKey]);
  let entrypointFolder = _path.default.join(targetProjectConfig.directory.root, `./entrypoint/${enrtypointKey}`);


  let relativeTargetFile = _path.default.relative(entrypointFolder, scriptTargetFile);

  let destinationFolder = _path.default.join(targetProjectConfig.directory.distribution, _path.default.relative(targetProjectConfig.directory.root, entrypointFolder));
  await _fs.promises.mkdir(destinationFolder, { recursive: true });


  let filePath = _path.default.join(destinationFolder, 'index.js');
  let content = `module.exports = require('${relativeTargetFile}')`;
  await _fs.promises.appendFile(filePath, content, { encoding: 'utf8' });
};exports.entrypointProgrammaticAPI = entrypointProgrammaticAPI;

const entryointCLI = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));

  let enrtypointKey = 'cli';
  if (!(targetProjectConfig === null || targetProjectConfig === void 0 ? void 0 : targetProjectConfig.entrypoint) || !(targetProjectConfig === null || targetProjectConfig === void 0 ? void 0 : targetProjectConfig.entrypoint[enrtypointKey])) return;

  let scriptTargetFile = _path.default.join(targetProjectConfig.directory.source, targetProjectConfig.entrypoint[enrtypointKey]);
  let entrypointFolder = _path.default.join(targetProjectConfig.directory.root, `./entrypoint/${enrtypointKey}`);


  let relativeTargetFile = _path.default.relative(entrypointFolder, scriptTargetFile);

  let destinationFolder = _path.default.join(targetProjectConfig.directory.distribution, _path.default.relative(targetProjectConfig.directory.root, entrypointFolder));
  await _fs.promises.mkdir(destinationFolder, { recursive: true });


  let filePath = _path.default.join(destinationFolder, 'index.js');
  let content = `module.exports = require('${relativeTargetFile}')`;
  content = `#\!/usr/bin/env node\n` + content;
  await _fs.promises.appendFile(filePath, content, { encoding: 'utf8' });
};exports.entryointCLI = entryointCLI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,