"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.serverSide_transpileServerSide = exports.serverSide_transpileDatabaseData = exports.serverSide_copyDatabaseData = exports.serverSide_copyServerSide = exports.serverSide_installPackageUsingYarn = exports.polyfillClientSide_javascript = exports.polyfillClientSide_stylesheet = exports.polyfillClientSide_html = exports.polyfillClientSide_json = exports.polyfillClientSide_copySourceCode = exports.nativeClientSide_javascript = exports.nativeClientSide_stylesheet = exports.nativeClientSide_html = exports.nativeClientSide_json = exports.nativeClientSide_copySourceCode = exports.clientSide_libraryYarn = exports.clientSide_webcomponentYarn = exports.clientSide_jspm = void 0;var _path = _interopRequireDefault(require("path"));


var _util = _interopRequireDefault(require("util"));
var _stream = _interopRequireDefault(require("stream"));



var _vinylFs = require("vinyl-fs");
var _glob = _interopRequireDefault(require("glob"));

var _deploymentProvisioning = require("@dependency/deploymentProvisioning");



var _html = require("../transformPipeline/html.js");

var _javascript = require("../transformPipeline/javascript.js");
var _json = require("../transformPipeline/json.js");
var _stylesheet = require("../transformPipeline/stylesheet.js");
var _convertArrayToMultiplePatternGlob = require("../utility/convertArrayToMultiplePatternGlob.js");const pipeline = _util.default.promisify(_stream.default.pipeline);const wildcardPathnameMatcher = _util.default.promisify(_glob.default);
const packageDependencyPatternMatch = '**/@package*/**/*',
nodeModulePatternMatch = '**/node_modules/**/*';












const clientSide_jspm = ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  (0, _deploymentProvisioning.installPackageUsingJspm)({ jspmPath: _path.default.join(targetProjectConfig.directory.source, '/packageManager/library.browser.jspm') });
};exports.clientSide_jspm = clientSide_jspm;

const clientSide_webcomponentYarn = ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  (0, _deploymentProvisioning.installPackageUsingYarn)({ yarnPath: _path.default.join(targetProjectConfig.directory.source, '/packageManager/webcomponent.browser.yarn/') });
};exports.clientSide_webcomponentYarn = clientSide_webcomponentYarn;

const clientSide_libraryYarn = ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  (0, _deploymentProvisioning.installPackageUsingYarn)({ yarnPath: _path.default.join(targetProjectConfig.directory.source, '/packageManager/library.browser.yarn/') });
};exports.clientSide_libraryYarn = clientSide_libraryYarn;








const nativeClientSide_copySourceCode = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  await _deploymentProvisioning.synchronizeFile.recursivelySyncFile({
    source: targetProjectConfig.directory.clientSide,
    destination: targetProjectConfig.distribution.clientSide.native,
    copyContentOnly: true });

};exports.nativeClientSide_copySourceCode = nativeClientSide_copySourceCode;

const nativeClientSide_json = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let basePath = targetProjectConfig.directory.clientSide;
  let fileArray = await wildcardPathnameMatcher('**/*.json', { cwd: basePath, absolute: true, ignore: packageDependencyPatternMatch });
  if (fileArray.length) await pipeline((0, _vinylFs.src)(fileArray, { base: basePath }), ...(0, _json.pipeline)(), (0, _vinylFs.dest)(targetProjectConfig.distribution.clientSide.native));
};exports.nativeClientSide_json = nativeClientSide_json;

const nativeClientSide_html = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let basePath = targetProjectConfig.directory.clientSide;
  let fileArray = await wildcardPathnameMatcher('**/*.html', { cwd: basePath, absolute: true, ignore: packageDependencyPatternMatch });
  if (fileArray.length)
  await pipeline(
  (0, _vinylFs.src)(fileArray, { base: basePath }),
  ...(0, _html.pipeline)({ babelConfigFileName: 'nativeClientSideBuild.BabelConfig.js' }),
  (0, _vinylFs.dest)(targetProjectConfig.distribution.clientSide.native));

};exports.nativeClientSide_html = nativeClientSide_html;

const nativeClientSide_stylesheet = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let basePath = targetProjectConfig.directory.clientSide;
  let fileArray = await wildcardPathnameMatcher('**/*.css', { cwd: basePath, absolute: true, ignore: packageDependencyPatternMatch });
  if (fileArray.length) await pipeline((0, _vinylFs.src)(fileArray, { base: basePath }), ...(0, _stylesheet.pipeline)(), (0, _vinylFs.dest)(targetProjectConfig.distribution.clientSide.native));
};exports.nativeClientSide_stylesheet = nativeClientSide_stylesheet;

const nativeClientSide_javascript = async ({ node, context }) => {var _ref;
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let basePath = targetProjectConfig.directory.clientSide;
  let fileArray = await wildcardPathnameMatcher((_ref =
  [
  '**/*.js'], (0,


  _convertArrayToMultiplePatternGlob.convertArrayToMultiplePatternGlob)(_ref)),
  {
    cwd: basePath,
    absolute: true,
    ignore: [
    packageDependencyPatternMatch] });




  if (fileArray.length)
  await pipeline(
  (0, _vinylFs.src)(fileArray, { base: basePath }),
  ...(0, _javascript.serverJSPipeline)({ babelConfigFileName: 'nativeClientSideBuild.BabelConfig.js', includeSourceMap: false }),
  (0, _vinylFs.dest)(targetProjectConfig.distribution.clientSide.native));

};exports.nativeClientSide_javascript = nativeClientSide_javascript;









const polyfillClientSide_copySourceCode = ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  _deploymentProvisioning.synchronizeFile.recursivelySyncFile({ source: targetProjectConfig.directory.clientSide, destination: targetProjectConfig.distribution.clientSide.polyfill, copyContentOnly: true });
};exports.polyfillClientSide_copySourceCode = polyfillClientSide_copySourceCode;

const polyfillClientSide_json = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let basePath = targetProjectConfig.directory.clientSide;
  let fileArray = await wildcardPathnameMatcher('**/*.json', { cwd: basePath, absolute: true, ignore: packageDependencyPatternMatch });
  if (fileArray.length) await pipeline((0, _vinylFs.src)(fileArray, { base: basePath }), ...(0, _json.pipeline)(), (0, _vinylFs.dest)(targetProjectConfig.distribution.clientSide.polyfill));
};exports.polyfillClientSide_json = polyfillClientSide_json;

const polyfillClientSide_html = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let basePath = targetProjectConfig.directory.clientSide;
  let fileArray = await wildcardPathnameMatcher('**/*.html', { cwd: basePath, absolute: true, ignore: packageDependencyPatternMatch });
  if (fileArray.length)
  await pipeline(
  (0, _vinylFs.src)(fileArray, { base: basePath }),
  ...(0, _html.pipeline)({ babelConfigFileName: 'polyfillClientSideBuild.BabelConfig.js' }),
  (0, _vinylFs.dest)(targetProjectConfig.distribution.clientSide.polyfill));

};exports.polyfillClientSide_html = polyfillClientSide_html;

const polyfillClientSide_stylesheet = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let basePath = targetProjectConfig.directory.clientSide;
  let fileArray = await wildcardPathnameMatcher('**/*.css', { cwd: basePath, absolute: true, ignore: packageDependencyPatternMatch });
  if (fileArray.length) await pipeline((0, _vinylFs.src)(fileArray, { base: basePath }), ...(0, _stylesheet.pipeline)(), (0, _vinylFs.dest)(targetProjectConfig.distribution.clientSide.polyfill));
};exports.polyfillClientSide_stylesheet = polyfillClientSide_stylesheet;

const polyfillClientSide_javascript = async ({ node, context }) => {var _ref2;
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let basePath = targetProjectConfig.directory.clientSide;
  let fileArray = await wildcardPathnameMatcher((_ref2 =
  [
  '**/*.js'], (0,


  _convertArrayToMultiplePatternGlob.convertArrayToMultiplePatternGlob)(_ref2)),
  {
    cwd: basePath,
    absolute: true,
    ignore: [
    packageDependencyPatternMatch] });




  if (fileArray.length)
  await pipeline(
  (0, _vinylFs.src)(fileArray, { base: basePath }),
  ...(0, _javascript.serverJSPipeline)({ babelConfigFileName: 'polyfillClientSideBuild.BabelConfig.js', includeSourceMap: false }),
  (0, _vinylFs.dest)(targetProjectConfig.distribution.clientSide.polyfill));

};exports.polyfillClientSide_javascript = polyfillClientSide_javascript;








const serverSide_installPackageUsingYarn = ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  (0, _deploymentProvisioning.installPackageUsingYarn)({ yarnPath: _path.default.join(targetProjectConfig.directory.source, '/packageManager/library.server.yarn/') });
};exports.serverSide_installPackageUsingYarn = serverSide_installPackageUsingYarn;

const serverSide_copyServerSide = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  await _deploymentProvisioning.synchronizeFile.recursivelySyncFile({ source: targetProjectConfig.directory.serverSide, destination: targetProjectConfig.distribution.serverSide, copyContentOnly: true });
};exports.serverSide_copyServerSide = serverSide_copyServerSide;

const serverSide_copyDatabaseData = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  await _deploymentProvisioning.synchronizeFile.recursivelySyncFile.recursivelySyncFile({
    source: _path.default.join(targetProjectConfig.directory.source, 'databaseData'),
    destination: targetProjectConfig.directory.distribution,
    copyContentOnly: false });

};exports.serverSide_copyDatabaseData = serverSide_copyDatabaseData;

const serverSide_transpileDatabaseData = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let basePath = targetProjectConfig.directory.source;
  let fileArray = await wildcardPathnameMatcher('databaseData/**/*.js', { cwd: basePath, absolute: true, ignore: nodeModulePatternMatch });
  if (fileArray.length)
  await pipeline(
  (0, _vinylFs.src)(fileArray, { base: basePath }),
  ...(0, _javascript.serverJSPipeline)({ babelConfigFileName: 'serverBuild.BabelConfig.js', includeSourceMap: false }),
  (0, _vinylFs.dest)(_path.default.join(targetProjectConfig.directory.distribution, 'databaseData/')));

};exports.serverSide_transpileDatabaseData = serverSide_transpileDatabaseData;

const serverSide_transpileServerSide = async ({ node, context }) => {
  let targetProjectConfig = context.targetProjectConfig || function (e) {throw e;}(new Error(`• Context "targetProjectConfig" variable is required to run project dependent tasks.`));
  let basePath = targetProjectConfig.directory.serverSide;
  let fileArray = await wildcardPathnameMatcher('**/*.js', { cwd: basePath, absolute: true, ignore: nodeModulePatternMatch });
  if (fileArray.length)
  await pipeline(
  (0, _vinylFs.src)(fileArray, { base: basePath }),
  ...(0, _javascript.serverJSPipeline)({ babelConfigFileName: 'serverBuild.BabelConfig.js', includeSourceMap: false }),
  (0, _vinylFs.dest)(targetProjectConfig.distribution.serverSide));

};exports.serverSide_transpileServerSide = serverSide_transpileServerSide;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,